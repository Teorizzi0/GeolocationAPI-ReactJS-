{"version":3,"sources":["eventsConst.js","components/Map.js","components/UserList.js","components/CoordsTab.js","components/LocationSelector.js","hooks/index.js","components/LocationService.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","activeMembers","initQuery","placeChange","useState","mapData","setMapData","colorMap","setColorMap","canvasRef","useRef","placeChangeHandler","data","console","log","useEffect","window","socket","on","eventsConst","ctx","current","getContext","fillStyle","fillRect","removeListener","font","coordsList","map","el","uid","name","chain","pick","mapValues","unary","parseInt","value","color","forEach","coords","longitude","latitude","fillText","ref","id","width","height","allUsers","setAllUsers","undefined","myStat","setMyStat","iId","setInterval","clearInterval","activeMembersHandler","userList","emit","className","style","substring","u","idx","key","background","locations","setCoords","setAddress","LocationButton","onClick","Geocode","setApiKey","enableDebug","geoEffect","callback","isSecureContext","navigator","geolocation","getCurrentPosition","alert","address","a","fromLatLng","response","parseResult","status","results","formatted_address","useGeo","prevCoords","usePrev","pending","setPending","delta","reduce","acc","cur","range","length","v","i","some","CoordsTab","display","LocationSelector","HOST","location","origin","io","App","UserList","LocationService","Map","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13cd48bf.chunk.js","sourcesContent":["module.exports = {\n  activeMembers: 'activeMembers',\n  initQuery: 'initQuery',\n  placeChange: 'placeChange',\n}\n","import React, { useEffect, useState, useRef } from 'react'\nimport eventsConst from '../eventsConst'\nimport { unary, chain } from 'lodash'\n\nconst width = 720\nconst height = 720\n\nexport default () => {\n  const [mapData, setMapData] = useState([])\n  const [colorMap, setColorMap] = useState({})\n  const canvasRef = useRef()\n  const placeChangeHandler = (data, colorMap) => {\n    console.log('handle map update', data, colorMap)\n    setMapData(data)\n    setColorMap(colorMap)\n  }\n\n  useEffect(() => {\n    window.socket.on(eventsConst.placeChange, placeChangeHandler)\n    // draw canvas here\n    const ctx = canvasRef.current.getContext('2d')\n    // Black background\n    ctx.fillStyle = '#BFBFBF'\n    // Draw rectangle for the background\n    ctx.fillRect(0, 0, width, height)\n\n    return () => {\n      window.socket.removeListener(eventsConst.placeChange, placeChangeHandler)\n    }\n  }, [])\n\n  useEffect(() => {\n    const ctx = canvasRef.current.getContext('2d')\n    ctx.fillStyle = '#F2F2F2'\n    ctx.fillRect(0, 0, width, height)\n    ctx.font = '12px Inconsolata'\n    // latitude: 60.1873614, longitude: 24.8366263, name: \"Current\"\n    const dataToCoords = el => {\n      const uid = el[0]\n      const { name } = el[1]\n      const coords = chain(el[1])\n        .pick(['latitude', 'longitude'])\n        .mapValues(unary(parseInt))\n        .mapValues(el => (el * width) / 90)\n        .value()\n      return {\n        // uid,\n        ...coords,\n        color: colorMap[uid],\n        name,\n      }\n    }\n    const coordsList = mapData.map(dataToCoords)\n    console.log(coordsList)\n    coordsList.forEach(coords => {\n      ctx.fillStyle = coords.color\n      ctx.fillRect(coords.longitude, height - coords.latitude, 10, 10)\n      ctx.fillText(\n        coords.name,\n        coords.longitude + 15,\n        height - coords.latitude + 5,\n      )\n    })\n  }, [mapData])\n\n  // const Pin = ({ id, longitude, latitude, name }) => (\n  //   <div className='pin'>\n  //     <div>{id}</div>\n  //     <div>{longitude}</div>\n  //     <div>{latitude}</div>\n  //     <div>{name}</div>\n  //   </div>\n  // )\n  return (\n    <div>\n      <div>\n        <canvas ref={canvasRef} id='map' width={width} height={height} />\n      </div>\n      {/* {mapData.map(([id, data]) => (\n        <Pin id={id} {...data} key={id} />\n      ))} */}\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport eventsConst from '../eventsConst'\n\nexport default () => {\n  const [allUsers, setAllUsers] = useState([])\n\n  const [colorMap, setColorMap] = useState({})\n  const [myStat, setMyStat] = useState(undefined)\n\n  useEffect(() => {\n    const iId = setInterval(() => {\n      const socket = window.socket\n      if (socket) {\n        setMyStat(socket.id)\n        clearInterval(iId)\n        console.log('set my status')\n      }\n    }, 200)\n  })\n\n  const activeMembersHandler = (userList, colorMap) => {\n    console.log('handle user list update', colorMap)\n    setAllUsers(userList)\n    setColorMap(colorMap)\n  }\n\n  useEffect(() => {\n    window.socket.emit(eventsConst.initQuery)\n    window.socket.on(eventsConst.activeMembers, activeMembersHandler)\n    return () => {\n      window.socket.removeListener(\n        eventsConst.activeMembers,\n        activeMembersHandler,\n      )\n    }\n  }, [])\n\n  return (\n    <div>\n      {myStat ? (\n        <div id='my-status'>\n          <i className='material-icons'>account_circle</i>\n          <span\n            style={{\n              color: colorMap[myStat.substring(0, 5)],\n            }}\n          >\n            {myStat.substring(0, 5)}\n          </span>\n        </div>\n      ) : (\n        'connecting...'\n      )}\n      <div id='user-list'>\n        <div className='bold'>Active users</div>\n        <ul className='clean-list'>\n          {allUsers.map((u, idx) => (\n            <li key={idx}>\n              <div\n                className='user-item'\n                style={{\n                  background: colorMap[u],\n                }}\n              >\n                {u}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport default ({ coords }) => {\n  if (!coords) return <div>Getting position...</div>\n  else {\n    const { latitude, longitude } = coords\n\n    return (\n      <div className='coords-tab'>\n        <div>latitude: {latitude}</div>\n        <div>longitude: {longitude}</div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport eventsConst from '../eventsConst'\n\nconst locations = [\n  {\n    latitude: 59.3293,\n    longitude: 18.0686,\n    name: 'Stockholm',\n  },\n  {\n    latitude: 59.9139,\n    longitude: 10.7522,\n    name: 'Oslo',\n  },\n  {\n    latitude: 40.4168,\n    longitude: 3.7038,\n    name: 'Madrid',\n  },\n  {\n    // 52.5200° N, 13.4050° E\n    latitude: 52,\n    longitude: 13,\n    name: 'Berlin',\n  },\n  {\n    // 55.7558° N, 37.6173° E\n    latitude: 55.7558,\n    longitude: 37.52,\n    name: 'Moscow',\n  },\n  {\n    latitude: 41.8902,\n    longitude: 12.4923,\n    name: 'Rome',\n  },\n\n  {\n    latitude: 48.8647,\n    longitude: 2.349,\n    name: 'Paris',\n  },\n\n  {\n    latitude: 47.4979,\n    longitude: 19.0402,\n    name: 'Budapest',\n  },\n  {\n    latitude: 52.3718,\n    longitude: 4.896,\n    name: 'Amsterdam',\n  },\n\n  {\n    latitude: 59.4369,\n    longitude: 24.7535,\n    name: 'Tallin',\n  },\n]\n\nexport default ({ setCoords, setAddress }) => {\n  const LocationButton = ({ data }) => (\n    <div\n      className='location-button'\n      {...data}\n      onClick={() => {\n        setCoords({\n          latitude: data.latitude,\n          longitude: data.longitude,\n        })\n        setAddress(data.name)\n        window.socket.emit(eventsConst.placeChange, data)\n      }}\n    >\n      <div>{data.name}</div>\n      <div>\n        <i className='material-icons'>airplanemode_active</i>\n      </div>\n    </div>\n  )\n\n  return (\n    <div className='location-buttons-container'>\n      {locations.map(el => (\n        <LocationButton data={el} key={el.name} />\n      ))}\n    </div>\n  )\n}\n","import { useState, useEffect, useRef } from 'react'\nimport eventsConst from '../eventsConst'\nimport Geocode from 'react-geocode'\n\n// set Google Maps Geocoding API for purposes of quota management. Its optional but recommended.\nGeocode.setApiKey('AIzaSyD_FDJ_tv1sCOg80r5m4M-lF3xhDvGE-ks')\n\n// Enable or disable logs. Its optional.\nGeocode.enableDebug()\n\nconst geoEffect = callback => {\n  if (window.isSecureContext) {\n    if ('geolocation' in navigator) {\n      navigator.geolocation.getCurrentPosition(callback)\n    }\n  } else {\n    alert('not secure context')\n  }\n}\n\nconst useGeo = () => {\n  const [coords, setCoords] = useState(undefined)\n  const [address, setAddress] = useState('')\n\n  useEffect(() => {\n    geoEffect(async ({ coords }) => {\n      console.log(coords, 'uesGeo')\n      setCoords(coords)\n      const { latitude, longitude } = coords\n      const response = await Geocode.fromLatLng(latitude, longitude)\n      console.log(response)\n      let parseResult = 'Current'\n      if (response.status === 'OK') {\n        parseResult = response.results[0].formatted_address\n        setAddress(parseResult)\n      }\n      window.socket.emit(eventsConst.placeChange, {\n        latitude,\n        longitude,\n        name: parseResult,\n      })\n    })\n  }, [])\n\n  return [coords, setCoords, address, setAddress]\n}\n\nconst usePrev = value => {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = useRef()\n\n  // Store current value in ref\n  useEffect(() => {\n    ref.current = value\n  }, [value]) // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current\n}\n\nconst useSubscription = (event, handler) => {\n  useEffect(() => {\n    window.socket.on(event, handler)\n    return () => {\n      window.socket.removeListener(event, handler)\n    }\n  }, [event, handler])\n}\n\nexport { useSubscription, usePrev, useGeo, geoEffect }\n","import React, { useEffect, useState } from 'react'\nimport eventsConst from '../eventsConst'\nimport CoordsTab from './CoordsTab'\nimport LocationSelector from './LocationSelector'\nimport { useGeo, usePrev, geoEffect } from '../hooks/index'\nimport { range } from 'lodash'\n\nexport default () => {\n  const [coords, setCoords, address, setAddress] = useGeo()\n  const prevCoords = usePrev(coords)\n\n  const [pending, setPending] = useState(false)\n  // console.log('prev:', prevCoords)\n  // console.log(coords)\n\n  useEffect(() => {\n    if (!prevCoords) return\n    const delta = [coords, prevCoords]\n      .map(el => [el.latitude, el.longitude])\n      .reduce((acc, cur) => {\n        range(cur.length).map((v, i) => {\n          acc[i] -= cur[i]\n        })\n        return acc\n      })\n    if (delta.some(v => v > 0.01)) {\n      console.log('change delta:', delta)\n    }\n  }, [coords, prevCoords])\n\n  const Prev = () =>\n    !prevCoords ? (\n      <div></div>\n    ) : (\n      <div id='previous-location'>\n        <div style={{ display: 'flex' }}>\n          <div>Previous </div> <i className='material-icons'>history</i>\n        </div>\n        <CoordsTab coords={prevCoords} />\n      </div>\n    )\n\n  return (\n    <>\n      <div id='current-location'>\n        <div\n          className='location-button'\n          onClick={() => {\n            setPending(true)\n            geoEffect(({ coords }) => {\n              setCoords(coords)\n              setAddress('Current')\n              console.log('updated position', coords)\n              const { latitude, longitude } = coords\n              let parseResult = 'Current'\n              window.socket.emit(eventsConst.placeChange, {\n                latitude,\n                longitude,\n                name: parseResult,\n              })\n              setPending(false)\n            })\n          }}\n        >\n          <div>Current </div> <i className='material-icons'>near_me</i>\n        </div>\n        {pending ? (\n          <div>Updating ...</div>\n        ) : (\n          <>\n            <div className='serif'>{address}</div>\n            <CoordsTab coords={coords} />{' '}\n          </>\n        )}\n      </div>\n      <Prev />\n      <LocationSelector setCoords={setCoords} setAddress={setAddress} />\n    </>\n  )\n}\n","import React from 'react'\nimport io from 'socket.io-client'\nimport Map from './components/Map'\nimport UserList from './components/UserList'\nimport LocationService from './components/LocationService'\nconst HOST = window.location.origin\n\n// window.socket = io('http://localhost:5000')\n\nwindow.socket = io(HOST)\n// window.socket = io(`http://130.233.101.204:5000`)\n// window.socket = io(`http://192.168.1.4:5000`)\n\n//\nconst App = () => {\n  return (\n    <div className='app'>\n      <div className='left'>\n        <UserList />\n        <LocationService />\n      </div>\n      <div className='right'>\n        <Map />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}